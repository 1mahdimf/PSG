<?php

declare(strict_types=1);

/**
 * Stage 2: Config Extractor
 * - Reads channel data and cached HTML from Stage 1.
 * - Extracts proxy configs from both cached HTML files AND the remote private_configs.json.
 * - Processes, enriches, and saves the final subscription files.
 * - Removes channels from channelsAssets.json if they no longer provide valid configs.
 */

// --- Setup ---
ini_set('display_errors', '1');
ini_set('display_startup_errors', '1');
error_reporting(E_ALL);

require 'functions.php';

// --- Configuration Constants ---
const ASSETS_FILE = __DIR__ . '/channelsData/channelsAssets.json';
const HTML_CACHE_DIR = __DIR__ . '/channelsData/html_cache';
const OUTPUT_DIR = __DIR__ . '/subscriptions';
const LOCATION_DIR = OUTPUT_DIR . '/location';
const FINAL_CONFIG_FILE = __DIR__ . '/config.txt';
const CONFIGS_TO_PROCESS_PER_SOURCE = 1; // Process the latest N configs from each source.
// --- NEW: URL for the private configs generated by the MadelineProto script ---
const PRIVATE_CONFIGS_URL = 'https://raw.githubusercontent.com/itsyebekhe/PSGP/main/private_configs.json';


// --- 1. Load Source Data and Sanity Check ---
echo "--- STAGE 2: CONFIG EXTRACTOR ---" . PHP_EOL;
echo "1. Loading source list from assets file..." . PHP_EOL;

if (!file_exists(ASSETS_FILE)) {
    die("Error: channelsAssets.json not found. Please run the assets script first." . PHP_EOL);
}
if (!is_dir(HTML_CACHE_DIR)) {
    echo "Warning: HTML cache directory not found. Will only process subscription-based channels if any." . PHP_EOL;
}

$sourcesArray = json_decode(file_get_contents(ASSETS_FILE), true);
if (json_last_error() !== JSON_ERROR_NONE) {
    die("Error: Invalid JSON in assets file." . PHP_EOL);
}


// --- 2. Extract Configs from Cached HTML Files ---
echo "\n2. Extracting configs from local HTML cache..." . PHP_EOL;
$configsList = [];
$totalSources = count($sourcesArray);
$sourceCounter = 0;

foreach ($sourcesArray as $source => $sourceData) {
    print_progress(++$sourceCounter, $totalSources, 'Extracting (HTML):');
    if (isset($sourceData['subscription_url'])) continue;
    
    $htmlFile = HTML_CACHE_DIR . '/' . $source . '.html';
    if (!file_exists($htmlFile)) continue;

    $htmlContent = file_get_contents($htmlFile);
    if (empty($htmlContent)) continue;

    $extractedLinks = extractLinksByType($htmlContent);
    if (!empty($extractedLinks)) {
        $configsList[$source] = array_values(array_unique($extractedLinks));
    }
}
echo PHP_EOL . "HTML extraction complete. Found configs from " . count($configsList) . " sources." . PHP_EOL;


// --- NEW: STAGE 2.5 ---
// Integrate configs from the remote private_configs.json file.
echo "\n2.5. Integrating configs from private source..." . PHP_EOL;
$privateConfigsJson = @file_get_contents(PRIVATE_CONFIGS_URL);

if ($privateConfigsJson === false) {
    echo "  - WARNING: Could not fetch private_configs.json. Skipping this integration." . PHP_EOL;
} else {
    $privateConfigsData = json_decode($privateConfigsJson, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        echo "  - WARNING: The fetched private_configs.json is not valid JSON. Skipping." . PHP_EOL;
    } else {
        echo "  - Successfully fetched private configs. Merging..." . PHP_EOL;
        foreach ($privateConfigsData as $source => $configs) {
            if (empty($configs) || !is_array($configs)) continue;

            // Check if this source already has configs from HTML scraping
            if (isset($configsList[$source])) {
                // Merge and remove duplicates
                $configsList[$source] = array_values(array_unique(array_merge($configsList[$source], $configs)));
                echo "    - Merged private configs for existing source: '{$source}'" . PHP_EOL;
            } else {
                // Add as a new source
                $configsList[$source] = $configs;
                echo "    - Added configs for private-only source: '{$source}'" . PHP_EOL;
            }
        }
        echo "  - Finished merging private configs." . PHP_EOL;
    }
}


// --- 3. Process and Enrich Configs ---
echo "\n3. Processing and enriching all configs..." . PHP_EOL;
$ipInfoCache = [];
$finalOutput = [];
$locationBased = [];
$sourcesWithValidConfigs = [];

$configFields = [
    'vmess' => ['ip' => 'add', 'name' => 'ps'],
    'vless' => ['ip' => 'hostname', 'name' => 'hash'],
    'trojan' => ['ip' => 'hostname', 'name' => 'hash'],
    'tuic' => ['ip' => 'hostname', 'name' => 'hash'],
    'hy2' => ['ip' => 'hostname', 'name' => 'hash'],
    'ss' => ['ip' => 'server_address', 'name' => 'name'],
];

$totalConfigsToProcess = 0;
foreach ($configsList as $configs) {
    $totalConfigsToProcess += min(count($configs), CONFIGS_TO_PROCESS_PER_SOURCE);
}
$processedCount = 0;

foreach ($configsList as $source => $configs) {
    $configsToProcess = array_slice($configs, -CONFIGS_TO_PROCESS_PER_SOURCE);
    $key_offset = count($configs) - count($configsToProcess);

    foreach ($configsToProcess as $key => $config) {
        if ($totalConfigsToProcess > 0) {
            print_progress(++$processedCount, $totalConfigsToProcess, 'Processing:');
        }
        
        $config = explode('<', $config, 2)[0];
        if (!is_valid($config)) continue;
        $type = detect_type($config);
        if ($type === null || !isset($configFields[$type])) continue;
        $decodedConfig = configParse($config);
        if ($decodedConfig === null) continue;
        if ($type === 'ss' && (empty($decodedConfig['encryption_method']) || empty($decodedConfig['password']))) continue;

        $ipField = $configFields[$type]['ip'];
        $nameField = $configFields[$type]['name'];
        $ipOrHost = $decodedConfig[$ipField] ?? null;
        if ($ipOrHost === null) continue;
        
        if (!isset($ipInfoCache[$ipOrHost])) {
            $info = ip_info($ipOrHost);
            $ipInfoCache[$ipOrHost] = $info ? $info->country : 'XX';
        }
        $countryCode = $ipInfoCache[$ipOrHost];

        $flag = ($countryCode === 'XX') ? '❔' : (($countryCode === 'CF') ? '🚩' : getFlags($countryCode));
        
        // 1. Use lock emojis for security status instead of colored circles.
        $securityEmoji = isEncrypted($config) ? '🔒' : '🔓';

        // 2. Create the new name using your preferred format.
        //    Format: FLAG COUNTRY_CODE | SECURITY_ICON PROTOCOL_TYPE | @source #ID
        $newName = sprintf(
            '%s%s|%s%s|@%s$%d',
            $flag,                          // Flag emoji (e.g., 🇺🇸)
            $countryCode,                   // 2-letter country code (e.g., US)
            $securityEmoji,                 // Security status emoji (🔒 or 🔓)
            strtoupper($type),              // Protocol type in uppercase (e.g., VLESS)
            $source,                        // Source channel name
            ($key + $key_offset) + 1        // 1-based index for user-friendliness
        );
        $decodedConfig[$nameField] = $newName;
        
        $encodedConfig = reparseConfig($decodedConfig, $type);
        if ($encodedConfig === null) continue;

        $cleanConfig = str_replace('amp%3B', '', $encodedConfig);
        $finalOutput[] = $cleanConfig;
        $locationBased[$countryCode][] = $cleanConfig;

        if (!isset($sourcesWithValidConfigs[$source])) {
            $sourcesWithValidConfigs[$source] = true;
        }
    }
}
echo PHP_EOL . "Processing complete." . PHP_EOL;


// --- 4. Write Subscription Files ---
echo "\n4. Writing subscription files..." . PHP_EOL;
if (is_dir(LOCATION_DIR)) deleteFolder(LOCATION_DIR);
mkdir(LOCATION_DIR . '/normal', 0775, true);
mkdir(LOCATION_DIR . '/base64', 0775, true);

foreach ($locationBased as $location => $configs) {
    if (empty(trim($location))) continue;
    $plainText = implode(PHP_EOL, $configs);
    file_put_contents(LOCATION_DIR . '/normal/' . $location, $plainText);
    file_put_contents(LOCATION_DIR . '/base64/' . $location, base64_encode($plainText));
}
file_put_contents(FINAL_CONFIG_FILE, implode(PHP_EOL, $finalOutput));


// --- 5. Clean up channelsAssets.json ---
echo "\n5. Cleaning up channelsAssets.json..." . PHP_EOL;
$originalSourceCount = count($sourcesArray);
$updatedSourcesArray = array_filter(
    $sourcesArray,
    function ($sourceData, $key) use ($sourcesWithValidConfigs) {
        if (isset($sourceData['subscription_url'])) return true;
        return isset($sourcesWithValidConfigs[$key]);
    },
    ARRAY_FILTER_USE_BOTH
);
$finalSourceCount = count($updatedSourcesArray);
$removedCount = $originalSourceCount - $finalSourceCount;
if ($removedCount > 0) {
    echo "Removed $removedCount source(s) that had no valid configs and were not subscription links." . PHP_EOL;
    file_put_contents(
        ASSETS_FILE,
        json_encode($updatedSourcesArray, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)
    );
} else {
    echo "No sources needed to be removed." . PHP_EOL;
}
echo "\nDone! All files have been generated successfully." . PHP_EOL;
